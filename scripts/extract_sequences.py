import argparse
import pandas as pd
import subprocess
import re

def filter_bed(args, filtered_bed):
    '''
    Filter the BED file based on qvalue and adjust coordinates.
    '''
    # Read bed file
    df = pd.read_csv(args.bed, sep="\t", header=None)

    # Filter on qvalue and adjust coordinates
    df = df[df[4] >= args.qvalue]
    df[2] = df[2] + int(args.length/2)
    df[1] = df[1] - int(args.length/2)

    # Save new bed file
    df.to_csv(filtered_bed, sep="\t", header=False, index=False)

def run_bedtools(args, filtered_bed):
    '''
    Run bedtools getfasta to extract sequences from the FASTA file based on the filtered BED file.
    '''
    # Construct the bedtools command
    command = [
        "bedtools", "getfasta",
        "-fi", args.fasta,
        "-bed", filtered_bed,
        "-name"
    ]

    # Run the command
    subprocess.run(command, check=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract sequences around peaks from a FASTA file.")
    parser.add_argument("-f", "--fasta", type=str, help="fasta file to extract sequences from", dest="fasta", required=True)
    parser.add_argument("-b", "--bed", type=str, help="peaks BED file generated by macs3", dest="bed", required=True)
    parser.add_argument("-l", "--length", type=int, help="length of the extracted fragment", dest="length", default=100)
    parser.add_argument("-t", "--threshold", type=float, help="log10 qvalue threshold to keep a peak", dest="qvalue", default=0)
    args = parser.parse_args()

    # Name of the filtered bed file
    filtered_bed = re.sub(".bed", "", args.bed) + "_filtered.bed"
    filter_bed(args, filtered_bed)
    run_bedtools(args, filtered_bed)