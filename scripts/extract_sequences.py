#!/usr/bin/env python3

import argparse
import pandas as pd
import subprocess
import re

def filter_peaks_file(args):
    '''
    Filter the peaks in the xls file and create 1 or 2 BED file(s) for peaks extraction
    '''
    # Read bed file
    peaks_table = open(args.peaks, "r").readlines()
    peaks_table = [x for x in peaks_table if not x.startswith(("#", "\n", "chr\t"))]

    chr = [x.split("\t")[0].strip("\n") for x in peaks_table]
    peaks_position = [int(x.split("\t")[4]) for x in peaks_table]
    pileup = [float(x.split("\t")[5]) for x in peaks_table]
    fold = [float(x.split("\t")[7]) for x in peaks_table]
    log10_qvalue = [float(x.split("\t")[8]) for x in peaks_table]
    peaks = [x.split("\t")[9].strip("\n") for x in peaks_table]

    extracted_data = {
        "Chromosome": chr,
        "start": peaks_position,
        "end": peaks_position,
        "Peak": peaks,
        "Pileup": pileup,
        "Fold Enrichment": fold,
        "Log10 Q-value": log10_qvalue
    }

    df = pd.DataFrame(extracted_data)

    # Filter on qvalue and fold enrichment and adjust coordinates
    df = df[(df["Log10 Q-value"] >= args.qvalue) & (df["Fold Enrichment"] >= args.fold)]
    df["end"] = df["end"] + int(args.length/2)
    df["start"] = df["start"] - int(args.length/2)

        return [bed]

def run_bedtools(args, bed):
    '''
    Run bedtools getfasta to extract sequences from the FASTA file based on the filtered BED file.
    '''
    # Construct the bedtools command
    command = [
        "bedtools", "getfasta",
        "-fi", args.fasta,
        "-bed", bed,
        "-name",
        "-fo", re.sub(".bed", ".fasta", bed)
    ]

    # Run the command
    subprocess.run(command, check=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract sequences around peaks from a FASTA file.")
    parser.add_argument("-f", "--fasta", type=str, help="fasta file to extract sequences from", dest="fasta", required=True)
    parser.add_argument("-p", "--peaks", type=str, help="peaks xls file generated by macs3", dest="peaks", required=True)
    parser.add_argument("-l", "--length", type=int, help="length of the extracted fragment", dest="length", default=100)
    parser.add_argument("-q", "--qvalue", type=int, help="log10 qvalue threshold to keep a peak", dest="qvalue", default=0)
    parser.add_argument("-e", "--enrichment", type=int, help="fold enrichment threshold to keep a peak", dest="fold", default=0)
    args = parser.parse_args()

    # Determine name for the generated bed file

    beds_to_create = filter_peaks_file(args)
    for bed in beds_to_create:
        run_bedtools(args, bed)